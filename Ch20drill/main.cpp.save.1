#include "std_lib_facilities.h"

template<typename Iter1, typename Iter2>
// requires Input_iterator<Iter1>() && Output_iterator<Iter2>()
Iter2 copy2(Iter1 f1, Iter1 e1, Iter2 f2)
{
	while (f1 != e1)
	{
		*f2 = *f1;
		f1++;
		f2++;
	}
	return f2;
}

int main()
{
	int array[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	vector<int> vec = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	list<int> lst = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; //1., 2., 3.

	int array2[10]; //array másolása 4.
	for (int i = 0; i<10; i++) array[i] = array2[i];

	vector<int> vec2 = vec;
	list<int> lst2 = lst;

        for (int i = 0; i<10; i++) array[i] += 2; //5.
	for (int i = 0; i<vec.size(); i++) vec[i] +=3;
	for (auto p = lst.begin(); p != lst.end(); p++) {*p+=5;}

	copy2(&array[0], &array[10], vec.begin());
	copy2(lst.begin(), lst.end(), &array[0]);

	vector<int>::iterator veci = find(vec.begin(), vec.end(), 3);
 veci < vec.end() ) 
	cout << distance(vec.begin(), veci) << endl;
	//else cout << "nincs eredmeny." << endl;

	return 0;
}
